clc;
clear all;

% Phase-1: Define Constraints and Objective Function
A = [1 1; 3 4; 1 1];
B = [20; 72; 5];
C = [4 5];

% Phase-2: Plot Constraint Lines
x1 = 0:0.5:max(B);
x21 = (B(1) - A(1,1) * x1) / A(1,2);
x22 = (B(2) - A(2,1) * x1) / A(2,2);
x23 = (B(3) - A(3,1) * x1) / A(3,2);
x21(x21 < 0) = NaN;
x22(x22 < 0) = NaN;
x23(x23 < 0) = NaN;
plot(x1, x21, 'b', x1, x22, 'g', x1, x23, 'r');
xlabel("x1 axis"); ylabel("x2 axis");
legend('eq1', 'eq2', 'eq3'); grid on;

%Phase-3: find corner point with axes
position_x1 = find(x1==0)
position_x21 = find(x21==0)
position_x22 = find(x22==0)

Line1 = [x21(:, [position_x1 position_x21])]
Line2 = [x22(:, [position_x1 position_x22])]


% Phase-4: Find Intersections with Axes
cornerpts = [0, 0];
for i = 1:size(A,1)
    if A(i,1) ~= 0
        x1_int = B(i) / A(i,1);
        x2_int = B(i) / A(i,2);
        if x1_int >= 0, cornerpts = [cornerpts; x1_int, 0]; end
        if x2_int >= 0, cornerpts = [cornerpts; 0, x2_int]; end
    end
end

% Phase-5: Find Intersections of Constraint Lines
for i = 1:size(A,1)
    for j = i+1:size(A,1)
        A1 = A([i, j], :);
        B1 = B([i, j]);
        if det(A1) ~= 0
            X = A1 \ B1;
            if all(X >= 0)
                cornerpts = [cornerpts; X'];
            end
        end
    end
end

% Phase-6: Filter Feasible Points
feasiblepts = [];
for i = 1:size(cornerpts,1)
    const_check = A * cornerpts(i,:)'- B;
    if all(const_check <= 0) % Ensure all constraints are satisfied
        feasiblepts = [feasiblepts; cornerpts(i,:)];
    end
end

% Phase-7: Shade Feasible Region
k = convhull(feasiblepts(:,1), feasiblepts(:,2));
fill(feasiblepts(k,1), feasiblepts(k,2), 'r', 'FaceAlpha', 0.5);
hold on;
plot(feasiblepts(:,1), feasiblepts(:,2), 'ko', 'MarkerFaceColor', 'k');

% Phase-8: Find Optimal Solution
values = feasiblepts * C';
[opt, index] = max(values);
X1 = feasiblepts(index,1);
X2 = feasiblepts(index,2);
fprintf('Optimal Value is %f at the points (%f, %f)\n', opt, X1, X2);
